
import heapq
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from matplotlib.animation import FuncAnimation
import numpy as np

def manhattan_distance(state, goal):
    distance = 0
    for i in range(1, 9):
        xi, yi = divmod(state.index(i), 3)
        xg, yg = divmod(goal.index(i), 3)
        distance += abs(xi - xg) + abs(yi - yg)
    return distance

def plot_state(state, ax, title="State"):
    ax.matshow(np.zeros((3, 3)), cmap="Blues")
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_title(title)

    images = []
    for i in range(9):
        if state[i] == 0:
            images.append(None)
        else:
            img = plt.imread(f"{state[i]}.png")
            images.append(img)

    for i in range(3):
        for j in range(3):
            if images[i * 3 + j] is not None:
                imagebox = OffsetImage(images[i * 3 + j], zoom=0.6)
                ab = AnnotationBbox(imagebox, (j, i), frameon=False, pad=0)
                ax.add_artist(ab)

def solve_puzzle(start, goal):
    open_list = []
    heapq.heappush(open_list, (0 + manhattan_distance(start, goal), 0, tuple(start), None))
    closed_list = set()
    parents = {}
    path = []
    
    while open_list:
        f, g, current, parent = heapq.heappop(open_list)
        current = list(current)

        if tuple(current) in closed_list:
            continue
        
        parents[tuple(current)] = parent
        if current == goal:
            while current:
                path.append(current)
                current = parents[tuple(current)] if current is not None else None
                current = list(current) if current is not None else None
            break
        
        closed_list.add(tuple(current))
        
        zero_idx = current.index(0)
        row, col = divmod(zero_idx, 3)
        for move in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_row, new_col = row + move[0], col + move[1]
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                successor = current[:]
                new_idx = new_row * 3 + new_col
                successor[zero_idx], successor[new_idx] = successor[new_idx], successor[zero_idx]
                if tuple(successor) not in closed_list:
                    heapq.heappush(open_list, (g + 1 + manhattan_distance(successor, goal), g + 1, tuple(successor), tuple(current)))
    return path[::-1]

start = [1, 0, 3, 4, 5, 6, 2, 7, 8]
goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]
path = solve_puzzle(start, goal)

fig, ax = plt.subplots(figsize=(6, 6))
plot_state(start, ax, "Step 0")
frame = 0

def update(frame):
    global path, ani
    ax.clear()
    plot_state(path[frame], ax, "Step {}".format(frame + 1))
    if path[frame] == goal:
        ani.event_source.stop()

ani = FuncAnimation(fig, update, frames=len(path), interval=1000)
plt.show()